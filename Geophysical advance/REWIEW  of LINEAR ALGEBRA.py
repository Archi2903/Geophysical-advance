#LINEAR ALGEBRA

"A1 System of Linear Equations"
#План работы:
# Цель найти х в сисеме уравнений 
# 1.Перепишем систему в матричном виде.
# 2.Используем NumPy для решения.
# 3.Реализуем метод Гаусса вручную.

import numpy as np # загружает библиотеку NumPy, которая используется для работы с массивами, линейной алгеброй, статистикой и другими числовыми вычислениями \ 
# задаёт сокращённое имя np, чтобы каждый раз не писать полное numpy. Это сокращение общепринято и делает код компактнее и удобнее.

# Коэффициенты системы, которые до равно в системе уравнений
A = np.array([
    [1, 2, 3],
    [1, 2, 2],
    [1, 3, 4]
], dtype=float)
# A - это матрица системы, arrray - функция библиотеки numpy, которая создаёт массив из списка, dtype=float - указывает, что тип данных в массиве будет вещественный(дробные значения)
#  Бывают помимо вещественных 
""" - целыее числа-  np.array([1, 2, 3], dtype=np.int32)   Массив целых чисел
      - комплексные числа - np.array([1, 2, 3], dtype=np.complex)
      - логические значения - np.array([True, False, True], dtype=np.bool)
      - строки - np.array(['abc', 'def', 'ghi'], dtype=np.str)
      - объекты - np.array([{'a': 1}, None, '123'], dtype=np.object)"""
# Коэффициены которые после равно в системе уравнений
B = np.array([14, 10, 16], dtype=float)

# Решение с помощью NumPy
X = np.linalg.solve(A, B) # решение системы уравнений с помощью NumPy
# linalg (Linear Algebra) – это модуль NumPy, содержащий функции для работы с линейной алгеброй 
# solve – это функция из модуля linalg, которая решает систему линейных уравнений вида AX = B, где: A – матрица коэффициентов, X – неизвестные, B – правая часть уравнения

# можно вместо np.linalg.solve(A, B) написать длинное уравнение 
def gaussian_elimination(A, B): # def - ключевое слово, которое используется для обьявления функции # gaussian_elimination - название функции # A, B - аргументы функции
    n = len(B)    # n - количество уравнений в системе, len(B) - функция, которая возвращает длину массива B это все нужно чтобы узнать количество уравнений в системе
    A = A.astype(float) # A.astype(float) - преобразует тип данных элементов матрицы A в вещественный тип данных зачем, чтобы избежать ошибок при делении
    B = B.astype(float) 

    # Прямой ход (приведение к верхнетреугольному виду)
    for i in range(n): # range - это функция, которая возвращает последовательность чисел от 0 до i-1
        max_row = np.argmax(np.abs(A[i:n, i])) + i  # Индекс максимального элемента в столбце
        if A[max_row, i] == 0:
            raise ValueError("Матрица несовместна или плохо обусловлена.")
        
        # Обмен строками
        A[[i, max_row]] = A[[max_row, i]]
        B[i], B[max_row] = B[max_row], B[i]
        
        # Поиск максимального элемента в столбце
        # Деление на ведущий элемент
        pivot = A[i, i] # pivot - ведущий элемент в строке, а А[i, i] - элемент на главной диагонали
        A[i] /= pivot   # Деление строки на ведущий элемент
        B[i] /= pivot  # Деление строки на ведущий элемент

        # Обнуление элементов ниже ведущего
        for j in range(i + 1, n): # Проходим по всем строкам ниже текущей range (i + 1, n) - это значит, что мы начинаем с i+1 строки и заканчиваем на n строке
            factor = A[j, i] # factor - коэффициент, на который нужно умножить текущую строку, чтобы занулить элемент A[j, i] pltcm j - строка, i - столбец
            A[j] -= factor * A[i] # Вычитаем из строки j строку i, умноженную на коэффициент factor
            B[j] -= factor * B[i]   # Вычитаем из строки j строку i, умноженную на коэффициент factor

    # Обратный ход (нахождение решений)
    X = np.zeros(n)  # Создаём массив для решений , здесь zeros - это функция, которая создаёт массив из нулей размером n
    for i in range(n - 1, -1, -1): # range(n - 1, -1, -1) - это значит, что мы начинаем с n-1 строки и заканчиваем на -1 строке с шагом -1
        X[i] = B[i] - np.sum(A[i, i + 1:] * X[i + 1:]) # np.sum - это функция, которая суммирует все элементы массива
    
    return X

# Вызов функции
solution = gaussian_elimination(A, B)

print("Решение методом Гаусса:")
print(solution)
print("решение с помощью NumPy")
print(X)


